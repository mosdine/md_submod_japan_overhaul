on_actions = {
	on_daily = {
		effect = {
			### Japan
			if = {
				limit = { tag = JAP }
			#	#MILLENNIUM DAWN ACCESS (OBSOLETED)
			#	set_variable = { check_point_interest_rate = interest_rate }
			#	calculate_debt_rate = yes
			#	MDACCESS_CALC_check_interest_change = yes
			
				#AI Tax Change Prevention
				if = {
					limit = {
						is_ai = yes
						NOT = { has_country_flag = no_personal_tax_rate_change }
					}
					set_country_flag = no_personal_tax_rate_change
				}
				if = {
					limit = {
						is_ai = yes
						NOT = { has_country_flag = no_corporate_tax_rate_change }
					}
					set_country_flag = no_corporate_tax_rate_change
				}
				#Player Tax Change Recovering (may be changed for the future mod developments)
				if = {
					limit = {
						is_ai = no
						has_country_flag = no_personal_tax_rate_change
					}
					clr_country_flag = no_personal_tax_rate_change
				}
				if = {
					limit = {
						is_ai = no
						has_country_flag = no_corporate_tax_rate_change
					}
					clr_country_flag = no_corporate_tax_rate_change
				}
			}
		}
	}
	
	on_weekly = {
		effect = {
			### Japan
			if = {
				limit = { tag = JAP }
				#Tokyo Centralisation Modifier	(Source: https://www.pref.saitama.lg.jp/a0206/toukei-tool/shizensyakai-tool.html, H11-R02(1999-2020) )
				if = {
					limit = { 617 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_HOKKAIDO } } }
					617 = { add_manpower = -158 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_hokkaido value = 158 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_hokkaido }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_hokkaido = 158 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Hokkaido"
				}
				if = {
					limit = { 616 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_TOHOKU } } }
					616 = { add_manpower = -551 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_tohoku value = 551 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_tohoku }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tohoku = 551 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Tohoku"
				}
				if = {
					limit = { 613 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_CHUBU } } }
					613 = { add_manpower = -333 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chubu value = 333 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chubu }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_chubu = 333 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Chubu"
				}
				if = {
					limit = { 612 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_KANSAI } } }
					612 = { add_manpower = -471 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kansai value = 471 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kansai }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_kansai = 471 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Kansai"
				}
				if = {
					limit = { 611 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_CHUGOKU } } }
					611 = { add_manpower = -138 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chugoku value = 138 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chugoku }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_chugoku = 138 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Chugoku"
				}
				if = {
					limit = { 610 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_SHIKOKU } } }
					610 = { add_manpower = -69 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_shikoku value = 69 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_shikoku }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_shikoku = 69 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Shikoku"
				}
				if = {
					limit = { 609 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_KYUSHU } } }
					609 = { add_manpower = -245 }
					if = {
						limit = {
							OR = {
								check_variable = { var = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kyushu value = 245 compare = not_equals }
								NOT = { has_variable = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kyushu }
							}
						}
						set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_kyushu = 245 }
					}
				#	log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Kyushu"
				}
				if = {
					limit = { 615 = { has_dynamic_modifier = { modifier = DYNAMIC_MODIFIER_MDMOSJAP_JAP_TOKYO_CENTRALISATION_KANTO } } }
					set_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = 0 }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_hokkaido }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_tohoku }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chubu }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kansai }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_chugoku }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_shikoku }
					add_to_variable = { mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo = mdmosjap_var_dynamic_modifier_tokyo_centralisation_kyushu }
					615 = { add_manpower = mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo }
					log = "[GetDateText]: [Root.GetName]: on_actions changed pop in Kanto: [?mdmosjap_var_dynamic_modifier_tokyo_centralisation_tokyo]"
				}
			}
		}
	}
	
	on_monthly = {
		effect = {
			if = {
				limit = { tag = JAP }
				ROOT = {
					decay_mdmosjap_conrad_left = yes
					decay_mdmosjap_conrad_right = yes
				}
				#Depopulation Idea
				add_to_variable = { mdmosjap_var_depopulating_virtual_rates_six_months_counter = 1 }
				if = {
					limit = {
						OR = {
							check_variable = { mdmosjap_var_depopulating_virtual_rates_six_months_counter = 6 }
							check_variable = { mdmosjap_var_depopulating_virtual_rates_six_months_counter > 6 }
						}
					}
					add_to_variable = { mdmosjap_var_depopulating_virtual_rates = -0.010 }
					set_variable = { mdmosjap_var_depopulating_virtual_rates_six_months_counter = 0 }
				}
			}
		}
	}
	
	on_yearly = {
		effect = {
			JAP = {
				
			}
		}
	}
	
	on_startup = {
		effect = {
			### Japan
			JAP = {
			#	load_focus_tree = japan_focus
				
				set_cosmetic_tag = JAP_western_conservatism
				
				clr_country_flag = MDMOSJAP_EVENT_THE_GREAT_REFERENDUM_MALCONCLUSION
				
				#Add Rail Line (Source: JR Timetable 2008 Feb.)
				build_railway = {	#Sekihoku Main Line:Asahikawa-Engaru-Kitami-Abashiri
					level = 1
					path = { 12352 12421 7595 4646 }
					start_province = 12352 target_province = 4646
				}
		#	#	build_railway = {	#Muroran Main Line:Hakodate-Sapporo
		#	#		level = 1
		#	#		path = { 3962 7532 10444 }
		#	#		start_province = 3962 target_province = 10444
		#	#	}
		#	#	build_railway = {	#Seikan Renraku Line:Aomori-Hakodate
		#	#		level = 1
		#	#		path = { 9859 3962 }
		#	#		start_province = 9859 target_province = 3962
		#	#	}
		#		build_railway = {	#Tazawako Line (Akita Shinkansen):Morioka-Tazawako-Akita
		#			level = 2
		#			path = { 9807 12056 1063 }
		#			start_province = 9807 target_province = 1063
		#		}
		#		build_railway = {	#Senzan Line: Sendai-Yamagata
		#			level = 1
		#			path = { 6188 4153 }
		#			start_province = 6188 target_province = 4153
		#		}
				build_railway = {	#Ouu Main Line (Yamagata Shinkansen): Fukushima-Yamagata-Shinjo
					level = 2
					path = { 1024 4153 4067 }
					start_province = 1024 target_province = 4067
				}
		#		build_railway = {	#Tohoku Main Line:Sendai-Shiogama-Ichinoseki-Morioka-Ninohe-Hachinohe-Aomori
		#			level = 1
		#			path = { 11847 6994 }
		#			start_province = 11847 target_province = 6994
		#		}
		#		build_railway = {
		#			level = 3
		#			path = { 7169 12056 9807 6194 11847 }
		#			start_province = 7169 target_province = 11847
		#		}
		#		build_railway = {	#Tohoku Main Line:Tokyo-Omiya-Utsunomiya-Nasu Shiobara-Koriyama-Fukushima-Sendai
		#			level = 1
		#			path = { 4118 1024 6188 }
		#			start_province = 4118 target_province = 6188
		#		}
		#		build_railway = {
		#			level = 3
		#			path = { 1097 993 1113 4118 }
		#			start_province = 1097 target_province = 4118
		#		}
		#		build_railway = {
		#			level = 1
		#			path = { 1182 1097 }
		#			start_province = 1182 target_province = 1097
		#		}
		#		build_railway = {	#Joban Line: Tokyo-Mito
		#			level = 2
		#			path = { 1182 4100 }
		#			start_province = 1182 target_province = 4100
		#		}
				build_railway = {	#Uchibo Line: Chiba-Awa Kamogawa
					level = 1
					path = { 4188 4184 }
					start_province = 4188 target_province = 4184
				}
				build_railway = {	#Chuo Main Line: Tokyo-Kofu-Okaya/Shiojiri-Tajimi-Nagoya
					level = 2
					path = { 1182 12072 10100 7187 10125 }
					start_province = 1182 target_province = 10125
				}
		#		build_railway = {	#Tokaido Main Line: Nagoya-Gifu-Otsu-Kobe
		#			level = 1
		#			path = { 10125 4172 }
		#			start_province = 10125 target_province = 4172
		#		}
		#		build_railway = {
		#			level = 3
		#			path = { 4172 1067 11960 }
		#			start_province = 4172 target_province = 11960
		#		}
		#	#	build_railway = {
		#	#		level = 1
		#	#		path = { 11960 7072 }
		#	#		start_province = 11960 target_province = 7072
		#	#	}
				build_railway = {
					level = 1
					path = { 7072 6168 }
					start_province = 7072 target_province = 6168
				}			
		#	#	build_railway = {	#Wakayama Line: Kyoto-Nara-Wakayama
		#	#		level = 1
		#	#		path = { 11960 1051 7113 }
		#	#		start_province = 11960 target_province = 7113
		#	#	}
				build_railway = {	#San'in Main Line: Kyoto-Maizuru
					level = 2
					path = { 11960 1136 }
					start_province = 11960 target_province = 1136
				}
				build_railway = {	#Sanyo Main Line: Kobe-Moji
					level = 1
					path = { 6168 12031 7212 11946 1092 10052 11985 1025 }
					start_province = 6168 target_province = 1025
				}
				build_railway = {	#Seto-Ohashi Line: Okayama-Takamatsu
					level = 2
					path = { 7212 4094 }
					start_province = 7212 target_province = 4094
				}
		#		build_railway = {	#Hakubi Line: Okayama-Niimi-Yonago
		#			level = 2
		#			path = { 7212 4197 1167 }
		#			start_province = 7212 target_province = 1167
		#		}
		#		build_railway = {	#Geibi Line: Hiroshima-Miyoshi
		#			level = 2
		#			path = { 1092 9968 }
		#			start_province = 1092 target_province = 9968
		#		}
				build_railway = {	#Dosan Line: Tadotsu-Awa Ikeda
					level = 2
					path = { 4094 12028 }
					start_province = 4094 target_province = 12028
				}
		#		build_railway = {	#Kagoshima Main Line: Moji-Hakata
		#			level = 1
		#			path = { 1025 7110 }
		#			start_province = 1025 target_province = 7110
		#		}
				build_railway = {	#Nagasaki Main Line: Kubota-Nagasaki
					level = 1
					path = { 1158 9950 }
					start_province = 1158 target_province = 9950
				}
		#		build_railway = {	#Nippo Main Line: Kokura-Oita-Saiki-Nobeoka-Miyazaki-Kagoshima
		#			level = 1
		#			path = { 1025 4027 10092 7178 1020 11949 }
		#			start_province = 1025 target_province = 11949
		#		}
				
				#Add Hubs (Source: https://www.jrfreight.co.jp/service/area.html)
		#		616 = {
		#			add_building_construction = { type = supply_node level = 1 instant_build = yes province = 6193 }	#Akita
		#		}
		#	#	615 = {
		#	#		add_building_construction = { type = supply_node level = 1 instant_build = yes province = 1097 }	#Kumagaya
		#	#	}
		#		612 = {
		#			add_building_construction = { type = supply_node level = 1 instant_build = yes province = 11960 }	#Kyoto
		#	#		add_building_construction = { type = supply_node level = 1 instant_build = yes province = 6168 }	#Kobe
		#		}
		#		611 = {
		#			add_building_construction = { type = supply_node level = 1 instant_build = yes province = 7212 }	#Okayama
		#		}
		#		610 = {
		#			add_building_construction = { type = supply_node level = 1 instant_build = yes province = 4094 }	#Takamatsu
		#		}
		#		609 = {
		#			add_building_construction = { type = supply_node level = 1 instant_build = yes province = 9950 }	#Nagasaki
		#		}
				
				#2000 BOOKMARK
				if = { limit = { date < 2016.12.31 }
					set_global_flag = MDMOSJAP_JAP_STARTS_2000
					
					#Constitutional Consciousness
					set_variable = { mdmosjap_JAP_var_LeftCon = 70.0 }
					set_variable = { mdmosjap_JAP_var_RightCon = 30.0 }
					
					CALC_MDMOSJAP_CONCON_MAXLIMIT = yes
					
					#Popular Radicalism
					set_variable = { mdmosjap_JAP_var_LeftRad = 5.0 }
					set_variable = { mdmosjap_JAP_var_RightRad = 5.0 }
					
					CALC_MDMOSJAP_CONRAD_MAXLIMIT = yes
					
					#MILLENNIUM DAWN ACCESS
					set_variable = { election_threshold = 0.00 } #JAPAN HAS NO ELECTION THRESHOLD SYSTEM IN NATURE
					set_country_flag = MDMOSJAP_MDMOSJAP_LOADED
					MDACCESS_CALC_zero_interest_policy = yes
				#	calculate_debt_rate = yes
					set_variable = { check_point_debt = debt }
				}
				
				#2017 BOOKMARK
				if = { limit = { date > 2016.12.31 }
					clr_global_flag = MDMOSJAP_JAP_STARTS_2000
					
					#Constitutional Consciousness
					set_variable = { mdmosjap_JAP_var_LeftCon = 42.0 }	#+2 WHEN WE WROTE OBAMA EVENT - maybe
					set_variable = { mdmosjap_JAP_var_RightCon = 58.0 }	#-2 WHEN WE WROTE OBAMA EVENT - maybe
					
					CALC_MDMOSJAP_CONCON_MAXLIMIT = yes
					
					#Popular Radicalism
					set_variable = { mdmosjap_JAP_var_LeftRad = 50.4 }	#+1 WHEN WE WROTE OBAMA EVENT - maybe
					set_variable = { mdmosjap_JAP_var_RightRad = 57.9 }	#+1 WHEN WE WROTE OBAMA EVENT - maybe
					
					CALC_MDMOSJAP_CONRAD_MAXLIMIT = yes
					
					#MILLENNIUM DAWN ACCESS
					set_variable = { election_threshold = 0.00 } #JAPAN HAS NO ELECTION THRESHOLD SYSTEM IN NATURE
					set_country_flag = MDMOSJAP_MDMOSJAP_LOADED
					MDACCESS_CALC_zero_interest_policy = yes
				#	calculate_debt_rate = yes
					set_variable = { check_point_debt = debt }
					
					#INTENTIONALLY PRIORITISED CONSTRUCTION
					612 = {
						add_building_construction = { type = industrial_complex level = 1 instant_build = no }
					}
					613 = {
						add_building_construction = { type = industrial_complex level = 1 instant_build = no }
					}
					615 = {
						add_building_construction = { type = industrial_complex level = 1 instant_build = no }
					}
					609 = {
						add_building_construction = { type = industrial_complex level = 1 instant_build = no }
					}
					611 = {
						add_building_construction = { type = dockyard level = 1 instant_build = no }
					}
					617 = {
						add_building_construction = { type = synthetic_refinery level = 2 instant_build = no }
					}
					616 = {
						add_building_construction = { type = industrial_complex level = 1 instant_build = no }
					}
					
					#AFTERMATH OF DISASTERS
					609 = {
						damage_building = { type = industrial_complex damage = 1.0 }
					}
					616 = {
						damage_building = { type = infrastructure damage = 1.5 }
						damage_building = { type = industrial_complex damage = 7.0 }
					}
					
					#UNLOCKED AND BYPASSED NATIONAL FOCUS IN JAPAN COUNTRY DATA
					add_offsite_building = { type = industrial_complex level = 1 }
					
					#HANDOVERED EVENTS' SCHEDULES
					country_event = { id = mdmosjap_japan.170316002 days = 74 }				#2017.03.16 - Takeshima's Day
					#KOR = { country_event = { id = mdmosjap_japan.1640831 days = 550 } }	#2017.05.26 - By NF: JAP_last_apologize
					country_event = { id = mdmosjap_japan.150430001 days = 840 }			#2019.04.21 - 2019 (H31) Nationwide Local Elections
					country_event = { id = mdmosjap_japan.130729001 days = 931 }			#2019.07.21 - 2019 (R1) Upper House Election
					country_event = { id = mdmosjap_japan.121107100 days = 7871 }			#2022.05.28 - Release of Fusako Shigenobu
				}
			}
			
			### United States of America
			USA = {
				#2017 BOOKMARK
				if = { limit = { date > 2016.12.31 }
				country_event = mdmosjap_japan.1610301										#By NF: JAP_article_five_of_treaty
				}
			}
			
			### Republic of Korea
			KOR = {
				#2017 BOOKMARK
				if = { limit = { date > 2016.12.31 }
					#HANDOVERED EVENTS' SCHEDULES
					country_event = { id = mdmosjap_japan.1640831 days = 145 }				#2017.05.26 - By NF: JAP_last_apologize
				}
			}
		}
	}
	
	on_declare_war = {
		effect = {
			#ROOT = ATTACKER / FROM = DEFENDER
			#IF JAP GOES WAR ON USA, ROOT = JAP (ATTACKER) / FROM = USA (DEFENDER)
			
			#THE CHINA ENCIRCLEMENT NETWORK or APDA GOES WAR WITH CHINA
			if = {
				limit = {
					ROOT = {
						AND = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
								has_idea = idea_mdmosjap_JAP_apda_member
							}
							NOT = { has_country_flag = MDMOSJAP_ANTICCP_IS_IN_THE_WAR_WITH_CHINA }
						}
					}
					any_other_country = {
						AND = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
								has_idea = idea_mdmosjap_JAP_apda_member
							}
							NOT = { has_country_flag = MDMOSJAP_ANTICCP_IS_IN_THE_WAR_WITH_CHINA }
						}
					}
					FROM = {
						OR = {
							tag = CHI
							is_guaranteed_by = CHI
							is_in_faction_with = CHI
							is_subject_of = CHI
							is_puppet_of = CHI
						}
					}
				}
				log = "[GetDateText]: [Root.GetName]: has declared war on [From.GetName]"
				ROOT = {
				#	hidden_effect = {
						country_event = mdmosjap_japan.410101
				#	}
					if = {
						limit = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
							}
						}
						create_faction = mdmosjap_faction_JAP_anticcp_alliance
					}
					if = {
						limit = {
							has_idea = idea_mdmosjap_JAP_apda_member
						}
						create_faction = mdmosjap_faction_JAP_apda_alliance
					}
				}
				set_global_flag = MDMOSJAP_THIRD_SINO_JAPANESE_WAR
			}
			
			#CHINA GOES WAR WITH THE CHINA ENCIRCLEMENT NETWORK or APDA
			if = {
				limit = {
					ROOT = { 
						OR = {
							tag = CHI
							is_in_faction_with = CHI
						#	is_subject_of = CHI
						#	is_puppet_of = CHI
						}
					}
					FROM = {
						AND = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
								has_idea = idea_mdmosjap_JAP_apda_member
							}
							NOT = { has_country_flag = MDMOSJAP_ANTICCP_IS_IN_THE_WAR_WITH_CHINA }
						}
					}
					any_other_country = {
						AND = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
								has_idea = idea_mdmosjap_JAP_apda_member
							}
							NOT = { has_country_flag = MDMOSJAP_ANTICCP_IS_IN_THE_WAR_WITH_CHINA }
						}
					}
				}
				log = "[GetDateText]: [Root.GetName]: has declared war on [From.GetName]"
				FROM = {
				#	hidden_effect = {
						country_event = mdmosjap_japan.410102
				#	}
					if = {
						limit = {
							OR = {
								has_idea = idea_mdmosjap_JAP_anticcp_refugees
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
								has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
								has_idea = idea_mdmosjap_JAP_anticcp_member
							}
						}
						create_faction = mdmosjap_faction_JAP_anticcp_alliance
					}
					if = {
						limit = {
							has_idea = idea_mdmosjap_JAP_apda_member
						}
						create_faction = mdmosjap_faction_JAP_apda_alliance
					}
				}
				set_global_flag = MDMOSJAP_THIRD_SINO_JAPANESE_WAR
			}
			
			#RYUKYU DECLARES INDEPENDENCE WAR WITH JAPAN
			if = {
				limit = {
					tag = JAP
					FROM = { tag = RYU }
					has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
				}
				log = "[GetDateText]: [Root.GetName]: has declared war on [From.GetName]"
				#JAPAN SET-UP
				ROOT = {
					country_event = mdmosjap_sengoku.71
					add_opinion_modifier = { target = FROM modifier = mdmosjap_opinion_RYU_JAP_independence_war }
					set_province_controller = 10124	#Preparation to spawn Japanese brigades on Nago
					division_template = {
						name = "Okinawa Prefectural Police"
						is_locked = yes
						#template_counter = 6
						#division_names_group = MDMOSJAP_JAP_POLICE
						regiments = {
							Mot_Inf_Bat = { x = 0 y = 0 }
							L_Inf_Bat = { x = 1 y = 0 }
						#	Special_Forces = { x = 2 y = 0 }
						}
					}
					division_template = {
						name = "Kagoshima Prefectural Police"
						is_locked = yes
						#template_counter = 6
						#division_names_group = MDMOSJAP_JAP_POLICE
						regiments = {
							Mot_Inf_Bat = { x = 0 y = 0 }
							L_Inf_Bat = { x = 1 y = 0 }
						#	Special_Forces = { x = 2 y = 0 }
						}
					}
					set_province_controller = 1123	#Prevent to spawn Ryukyuan brigades on Amamioshima
					618 = {
					#	limit = {
					#		is_core_of = FROM
					#		is_controlled_by = ROOT
					#	}
						create_unit = {
							division = "division_template = \"Okinawa Prefectural Police\" start_experience_factor = 0.1" 
							owner = ROOT
							allow_spawning_on_enemy_provs = no
							count = 2
						}
						create_unit = {
							division = "division_template = \"Kagoshima Prefectural Police\" start_experience_factor = 0.1" 
							owner = ROOT
							allow_spawning_on_enemy_provs = no
							count = 2
						}
					#	add_building_construction = { type = naval_base level = 1 province = 10124 instant_build = yes }
					}
					if = {
						limit = { has_country_flag = MDMOSJAP_JCW_BEAT_OKINAWAN_WITH_USFJ }
						division_template = {
							name = "Metropolitan Police"
							is_locked = yes
							#template_counter = 6
							#division_names_group = MDMOSJAP_JAP_POLICE
							regiments = {
								Mot_Inf_Bat = { x = 0 y = 0 }
								Mot_Inf_Bat = { x = 0 y = 1 }
								L_Inf_Bat = { x = 1 y = 0 }
								L_Inf_Bat = { x = 1 y = 1 }
							#	Special_Forces = { x = 2 y = 0 }
							}
						}
						618 = {
							create_unit = {
								division = "division_template = \"Metropolitan Police\" start_experience_factor = 0.1" 
								owner = ROOT
								allow_spawning_on_enemy_provs = no
								count = 1
							}
						}
					}
				}
				news_event = { id = mdmosjap_sengokunews.71 days = 1 }
				#RYUKYU SET-UP
				FROM = {
					set_capital = { state = 618 }
					add_opinion_modifier = { target = ROOT modifier = mdmosjap_opinion_RYU_JAP_refused_demand }
					REDISTRIBUTE_MDMOSJAP_RYU_GOVERNMENT_SETUP = yes
					swap_ideas = { remove_idea = volunteer_army add_idea = draft_army }
				#	swap_ideas = { remove_idea = volunteer_woman add_idea = drafted_woman }
					swap_ideas = { remove_idea = officer_military_school add_idea = officer_baptism_by_fire }
				#	add_ideas = gdp_3
					add_ideas = depression
					add_ideas = bureau_02
					add_ideas = edu_02
					add_ideas = social_01
					add_ideas = health_01
					add_ideas = Non_State_Actor
					division_template = {
						name = "Ryukyu Civil Defence Forces"
						is_locked = yes
						#template_counter = 6
						#division_names_group = MDMOSJAP_RYU_SEPARATIST
						regiments = {
							Militia_Bat = { x = 0 y = 0 }
							Militia_Bat = { x = 0 y = 1 }
						#	Militia_Bat = { x = 0 y = 2 }
						}
					}
					set_variable = { mdmosjap_RYU_var_StartUpUnitLoop = 0 }
					while_loop_effect = {
						limit = { check_variable = { mdmosjap_RYU_var_StartUpUnitLoop < mdmosjap_RYU_var_SeparatistAggressiveness } }
						618 = {
						#	limit = {
						#		is_controlled_by = FROM
						#	}
							create_unit = {
								division = "division_template = \"Ryukyu Civil Defence Forces\" start_experience_factor = 0.0" 
								owner = FROM
								allow_spawning_on_enemy_provs = no
								count = 1
							}
						}
						add_to_variable = { mdmosjap_RYU_var_StartUpUnitLoop = 1 }
					}
					618 = {	#FOR THE OUT OF ABOVE LOOP
						remove_building = { type = infrastructure level = 1 }
						add_building_construction = { type = bunker level = 1 province = 11932 instant_build = yes }
						add_building_construction = { type = coastal_bunker level = 1 province = 11932 instant_build = yes }
					}
					clear_variable = mdmosjap_RYU_var_StartUpUnitLoop
					inherit_technology = ROOT
					add_research_slot = -3
					if = {
						limit = {
							NOT = { has_idea = idea_mdmosjap_RYU_all_okinawa }
							has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
						}
						add_ideas = idea_mdmosjap_RYU_all_okinawa
					}
					if = {
						limit = {
							NOT = { has_idea = idea_mdmosjap_RYU_japanese_article_9 }
							has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
						}
						add_ideas = idea_mdmosjap_RYU_japanese_article_9
					}
					if = {
						limit = {
							NOT = { has_idea = idea_mdmosjap_RYU_rebellion_weak }
							has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
							NOT = { has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES_CEASED }
							NOT = { has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES_TRANQUILISED }
						}
						add_ideas = idea_mdmosjap_RYU_rebellion_weak
					}
					set_rule = {
						can_create_factions = no
					}
				#	add_ai_strategy = { type = prepare_for_war id = "JAP" value = 200 }
				#	add_ai_strategy = { type = antagonize id = "JAP" value = 200 }
				#	add_ai_strategy = { type = garrison value = 200 }
				}
			}
		}
	}
	
	on_capitulation = {
		#ROOT is the capitulated country, FROM is the winner
		effect = {
			#WHEN CHI IS FIGHTING WITH ANTI-CCP NETWORK / APDA
			if = {
				limit = {
					ROOT = {
						tag = CHI
					}
					FROM = {
						OR = {
							AND = {
								tag = TAI
								OR = {
									has_idea = idea_mdmosjap_JAP_anticcp_refugees
									has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
									has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
									has_idea = idea_mdmosjap_JAP_anticcp_member
									has_idea = idea_mdmosjap_JAP_apda_member
								}
								NOT = { is_in_faction_with = ROOT }
							}
							AND = {
								NOT = { tag = TAI }
								OR = {
									has_idea = idea_mdmosjap_JAP_anticcp_refugees
									has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge1
									has_idea = idea_mdmosjap_JAP_anticcp_refugees_revenge2
									has_idea = idea_mdmosjap_JAP_anticcp_member
									has_idea = idea_mdmosjap_JAP_apda_member
								}
								is_in_faction_with = TAI
								NOT = { is_in_faction_with = ROOT }
							}
						}
					}
				}
				ROOT = { capitulation_mdmosjap_CHI = yes }
			}
			
			#WHEN SOUTH KOREA / NORTH KOREA HAS BEEN CAPITULATED
			if = {
				limit = {
					has_global_flag = MDMOSJAP_SECOND_KOREAN_WAR
					OR = {
						ROOT = { tag = KOR }
						ROOT = { tag = NKO }
					}
					OR = {
						KOR = { NOT = { has_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER } }
						NKO = { NOT = { has_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER } }
					}
				}
				ROOT = {
					set_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER
				}
			}
			
			#WHEN RYUKYU HAD INDEPENDENCE WAR WITH JAPAN
			if = {
				limit = {
					tag = RYU
					has_war_with = JAP
					has_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
					NOT = { has_global_flag = MDMOSJAP_RYU_CAPITULATED  }
				}
				FROM = { news_event = { id = mdmosjap_sengokunews.90 days = 1 } }
				clr_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES
				set_global_flag = MDMOSJAP_OKINAWA_IN_FLAMES_IMPOSSIBLE_WAR
			}
		}
	}
	
	on_uncapitulation = {
		#ROOT is the uncapitulated country that once had capitulated
		effect = {
			#WHEN SOUTH KOREA / NORTH KOREA HAS BEEN CAPITULATED
			if = {
				limit = {
					has_global_flag = MDMOSJAP_SECOND_KOREAN_WAR
					NOT = { has_global_flag = MDMOSJAP_SECOND_KOREAN_WAR_CONFERENCE_EXECUTED }
					OR = {
						ROOT = { tag = KOR }
						ROOT = { tag = NKO }
					}
					has_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER
				}
				ROOT = {
					clr_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER
				}
			}
		}
	}
	
	on_peaceconference_ended = {
		#ROOT is the winner, FROM is the loser
		effect = {
			#REMOVE SOUTH KOREA'S / NORTH KOREA'S CASUS BELLI
			if = {
				limit = {
					has_global_flag = MDMOSJAP_SECOND_KOREAN_WAR
					NOT = { has_global_flag = MDMOSJAP_SECOND_KOREAN_WAR_CONFERENCE_EXECUTED }
					OR = {
						AND = {
							ROOT = { tag = KOR }
							has_wargoal_against = NKO
						}
						AND = {
							ROOT = { tag = NKO }
							has_wargoal_against = KOR
						}
					}
					FROM = {
						OR = {
							tag = NKO
							tag = KOR
						}
						has_country_flag = MDMOSJAP_SECOND_KOREAN_WAR_LOSER
					}
				}
				if = {
					limit = { ROOT = { tag = KOR } }
					remove_wargoal = { target = NKO type = all }
				}
				if = {
					limit = { ROOT = { tag = NKO } }
					remove_wargoal = { target = KOR type = all }
				}
			}
		}
	}

}
